		Block genesisBlock = new Block("Block1", "0");
		//System.out.println("Hash for block 1 : " + genesisBlock.hash);
		garden.add(genesisBlock);
		System.out.println("Trying to Mine block 1... ");
		garden.get(0).mineBlock(req);
		
		Block secondBlock = new Block("Block2",genesisBlock.hash);
		//System.out.println("Hash for block 2 : " + secondBlock.hash);
		garden.add(secondBlock);
		System.out.println("Trying to Mine block 2... ");
		garden.get(1).mineBlock(req);
		
		Block thirdBlock = new Block("Block3",secondBlock.hash);
		//System.out.println("Hash for block 3 : " + thirdBlock.hash);
		garden.add(thirdBlock);
		System.out.println("Trying to Mine block 3... ");
		garden.get(2).mineBlock(req);

		isChainValid();

		for (Block block : garden) {
            System.out.println(block);
        }

		test 2:
		_________________________________________________
		Security.addProvider(new BouncyCastleProvider());

		walletA = new Wallet();
		walletB = new Wallet();

		System.out.println("Private and public keys:");
		System.out.println(StringUtil.getStringFromKey(walletA.privateKey));
		System.out.println(StringUtil.getStringFromKey(walletA.publicKey));

		//Testing transactions between wallets

		Transaction testTrans = new Transaction(walletA.publicKey, walletB.publicKey, 5, null);
		testTrans.generateSignature(walletA.privateKey);

		//Verify the signature works and verify it from the public key
		System.out.println("Is signature verified?");
		System.out.println(testTrans.verifySignature());